schema {
    query: Query
    mutation: Mutation
}

type Comment {
    Product: Product!
    User: User!
    body: String!
    date: Date!
    id: ID!
    product_id: ID!
    user_id: ID!
}

type ListMetadata {
    count: Int!
}

type Mutation {
    createComment(body: String!, date: Date!, product_id: ID!, user_id: ID!): Comment!
    createManyComment(data: [CommentInput]): [Comment!]
    createManyProduct(data: [ProductInput]): [Product!]
    createManySeller(data: [SellerInput]): [Seller!]
    createManyUser(data: [UserInput]): [User!]
    createProduct(name: String!, price: Int!, seller_id: ID!): Product!
    createSeller(name: String!): Seller!
    createUser(name: String!): User!
    removeComment(id: ID!): Comment!
    removeProduct(id: ID!): Product!
    removeSeller(id: ID!): Seller!
    removeUser(id: ID!): User!
    updateComment(body: String, date: Date, id: ID!, product_id: ID, user_id: ID): Comment!
    updateProduct(id: ID!, name: String, price: Int, seller_id: ID): Product!
    updateSeller(id: ID!, name: String): Seller!
    updateUser(id: ID!, name: String): User!
}

type Product {
    Comments: [Comment!]
    Seller: Seller!
    id: ID!
    name: String!
    price: Int!
    seller_id: ID!
}

type Query {
    Comment(id: ID!): Comment!
    Product(id: ID!): Product!
    Seller(id: ID!): Seller!
    User(id: ID!): User!
    _allCommentsMeta(filter: CommentFilter, page: Int, perPage: Int): ListMetadata
    _allProductsMeta(filter: ProductFilter, page: Int, perPage: Int): ListMetadata
    _allSellersMeta(filter: SellerFilter, page: Int, perPage: Int): ListMetadata
    _allUsersMeta(filter: UserFilter, page: Int, perPage: Int): ListMetadata
    allComments(filter: CommentFilter, page: Int, perPage: Int, sortField: String, sortOrder: String): [Comment!]!
    allProducts(filter: ProductFilter, page: Int, perPage: Int, sortField: String, sortOrder: String): [Product!]!
    allSellers(filter: SellerFilter, page: Int, perPage: Int, sortField: String, sortOrder: String): [Seller!]
    allUsers(filter: UserFilter, page: Int, perPage: Int, sortField: String, sortOrder: String): [User!]
}

type Seller {
    Products: [Product!]
    id: ID!
    name: String!
}

type User {
    Comments: [Comment!]
    id: ID!
    name: String!
}

"Date type"
scalar Date

input CommentFilter {
    body: String
    body_gt: String
    body_gte: String
    body_lt: String
    body_lte: String
    body_neq: String
    date: Date
    date_gt: Date
    date_gte: Date
    date_lt: Date
    date_lte: Date
    date_neq: Date
    id: ID
    id_neq: ID
    ids: [ID]
    product_id: ID
    product_id_neq: ID
    q: String
    user_id: ID
    user_id_neq: ID
}

input CommentInput {
    body: String!
    date: Date!
    product_id: ID!
    user_id: ID!
}

input ProductFilter {
    id: ID
    id_neq: ID
    ids: [ID]
    name: String
    name_gt: String
    name_gte: String
    name_lt: String
    name_lte: String
    name_neq: String
    price: Int
    price_gt: Int
    price_gte: Int
    price_lt: Int
    price_lte: Int
    price_neq: Int
    q: String
    seller_id: ID
    seller_id_neq: ID
}

input ProductInput {
    name: String!
    price: Int!
    seller_id: ID!
}

input SellerFilter {
    id: ID
    id_neq: ID
    ids: [ID]
    name: String
    name_gt: String
    name_gte: String
    name_lt: String
    name_lte: String
    name_neq: String
    q: String
}

input SellerInput {
    name: String!
}

input UserFilter {
    id: ID
    id_neq: ID
    ids: [ID]
    name: String
    name_gt: String
    name_gte: String
    name_lt: String
    name_lte: String
    name_neq: String
    q: String
}

input UserInput {
    name: String!
}
